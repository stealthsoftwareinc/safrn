#
# For the copyright information for this file, please search up the
# directory tree for the first COPYING file.
#

if [[ "$(type -t \
autogen_gitbundles)" != function ]]; then
autogen_gitbundles() {

  local dir
  local x1
  local x2
  local x3
  local x4
  local name
  local commit

  case ${autogen_gitbundles_has_been_called+x} in
    ?*)
      barf 'autogen_gitbundles has already been called'
    ;;
  esac
  autogen_gitbundles_has_been_called=x
  readonly autogen_gitbundles_has_been_called

  case $# in
    1)
    ;;
    *)
      barf 'invalid argument count: %d' $#
    ;;
  esac

  dir=$1
  readonly dir
  expect_safe_path "$dir"

  cat >m4/DEFINE_ALL_GITBUNDLE_COMMITS.m4 <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

AC_DEFUN([DEFINE_ALL_GITBUNDLE_COMMITS], [[{

#
# The block that contains this comment is the expansion of the
# DEFINE_ALL_GITBUNDLE_COMMITS macro.
#

]m4_ifdef(
  [DEFINE_ALL_GITBUNDLE_COMMITS_HAS_BEEN_CALLED],
  [gatbps_fatal([
    DEFINE_ALL_GITBUNDLE_COMMITS has already been called
  ])],
  [m4_define([DEFINE_ALL_GITBUNDLE_COMMITS_HAS_BEEN_CALLED])])[

]m4_if(
  m4_eval([\$# != 0]),
  [1],
  [gatbps_fatal([
    DEFINE_ALL_GITBUNDLE_COMMITS requires exactly 0 arguments
    (\$# ]m4_if([\$#], [1], [[was]], [[were]])[ given)
  ])])[

]dnl begin_prerequisites
[

EOF

  cat >m4/DEFINE_ALL_GITBUNDLE_URLS.m4 <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

AC_DEFUN([DEFINE_ALL_GITBUNDLE_URLS], [[{

#
# The block that contains this comment is the expansion of the
# DEFINE_ALL_GITBUNDLE_URLS macro.
#

]m4_ifdef(
  [DEFINE_ALL_GITBUNDLE_URLS_HAS_BEEN_CALLED],
  [gatbps_fatal([
    DEFINE_ALL_GITBUNDLE_URLS has already been called
  ])],
  [m4_define([DEFINE_ALL_GITBUNDLE_URLS_HAS_BEEN_CALLED])])[

]m4_if(
  m4_eval([\$# != 0]),
  [1],
  [gatbps_fatal([
    DEFINE_ALL_GITBUNDLE_URLS requires exactly 0 arguments
    (\$# ]m4_if([\$#], [1], [[was]], [[were]])[ given)
  ])])[

]dnl begin_prerequisites
[

EOF

  for x1 in $dir/**/*.ag.json; do

    expect_safe_path "$x1"

    x2=$(echo $x1 | sed 's/\.ag\.json$//')
    x3=$(echo $x2 | sed "s|^$dir/||")
    x4=$(echo $x3 | sed 's/[^0-9A-Z_a-z]/_/g')

    commit=$(jq -r .commit $x1 | sed 's/\$/$][/g')

    cat >m4/DEFINE_${x4}_commit.m4 <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

AC_DEFUN([DEFINE_${x4}_commit], [[{

#
# The block that contains this comment is the expansion of the
# DEFINE_${x4}_commit macro.
#

]m4_ifdef(
  [DEFINE_${x4}_commit_HAS_BEEN_CALLED],
  [gatbps_fatal([
    DEFINE_${x4}_commit has already been called
  ])],
  [m4_define([DEFINE_${x4}_commit_HAS_BEEN_CALLED])])[

]m4_if(
  m4_eval([\$# != 0]),
  [1],
  [gatbps_fatal([
    DEFINE_${x4}_commit requires exactly 0 arguments
    (\$# ]m4_if([\$#], [1], [[was]], [[were]])[ given)
  ])])[

]m4_define(
  [${x4}_commit_default],
  [[$commit]])[

case $][{${x4}_commit+x} in
  "")
    ${x4}_commit=']${x4}_commit_default['
  ;;
esac
readonly ${x4}_commit

]AC_ARG_VAR(
  [${x4}_commit],
  [
    the commit of the $x3 Git repository to use
    (default: ${x4}_commit=']${x4}_commit_default[')
  ])[

:;}]])[]dnl
EOF

    cat >>m4/DEFINE_ALL_GITBUNDLE_COMMITS.m4 <<EOF
]AC_REQUIRE([DEFINE_${x4}_commit])[
EOF

    cat >m4/DEFINE_${x4}_urls.m4 <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

AC_DEFUN([DEFINE_${x4}_urls], [[{

#
# The block that contains this comment is the expansion of the
# DEFINE_${x4}_urls macro.
#

]m4_ifdef(
  [DEFINE_${x4}_urls_HAS_BEEN_CALLED],
  [gatbps_fatal([
    DEFINE_${x4}_urls has already been called
  ])],
  [m4_define([DEFINE_${x4}_urls_HAS_BEEN_CALLED])])[

]m4_if(
  m4_eval([\$# != 0]),
  [1],
  [gatbps_fatal([
    DEFINE_${x4}_urls requires exactly 0 arguments
    (\$# ]m4_if([\$#], [1], [[was]], [[were]])[ given)
  ])])[

]m4_define(
  [${x4}_urls_default],
  [[ ]dnl
[\$][(abs_srcdir)/../$x3 ]dnl
EOF

    jq -r '
      .urls[]
      | gsub("\\$"; "$][$][")
      | "['\'\\\\\'\''" + . + "'\'\\\\\'\'' ]dnl"
    ' $x1 >>m4/DEFINE_${x4}_urls.m4

    cat >>m4/DEFINE_${x4}_urls.m4 <<EOF
])[

case $][{${x4}_urls+x} in
  "")
    ${x4}_urls=']${x4}_urls_default['
  ;;
esac
readonly ${x4}_urls

]AC_ARG_VAR(
  [${x4}_urls],
  [
    the URLs from which to fetch the $x3 Git repository
    (default: ${x4}_urls=']${x4}_urls_default[')
  ])[

:;}]])[]dnl
EOF

    cat >>m4/DEFINE_ALL_GITBUNDLE_URLS.m4 <<EOF
]AC_REQUIRE([DEFINE_${x4}_urls])[
EOF

    cat >$x2.ac <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

[

]GATBPS_GIT_CLONE(
  [$dir-clones/$x3-\$(${x4}_commit)],
  [
    [\$(${x4}_urls)],
  ],
  [clean])[

]GATBPS_GIT_BUNDLE(
  [$x2-\$(${x4}_commit).gitbundle],
  [$dir-clones/$x3-\$(${x4}_commit)],
  [\$(${x4}_commit)],
  [clean])[

]GATBPS_CP(
  [$x2.gitbundle],
  [$x2-\$(${x4}_commit).gitbundle],
  [file],
  [clean])[

]
EOF

    cat >$x2.am <<EOF
##
## For the copyright information for this file, please search up the
## directory tree for the first COPYING file.
##

##
## This file was generated by ./autogen.
##

$dir-clones/$x3-\$(${x4}_commit): $x2.ac
$dir-clones/$x3-\$(${x4}_commit): $x2.am

$x2-\$(${x4}_commit).gitbundle: $x2.ac
$x2-\$(${x4}_commit).gitbundle: $x2.am

$x2.gitbundle: FORCE
$x2.gitbundle: $x2.ac
$x2.gitbundle: $x2.am
EOF

    autogen_ac_include $x2.ac
    autogen_am_include $x2.am

  done

  cat >>m4/DEFINE_ALL_GITBUNDLE_COMMITS.m4 <<EOF

]dnl end_prerequisites
[

:;}]])[]dnl
EOF

  cat >>m4/DEFINE_ALL_GITBUNDLE_URLS.m4 <<EOF

]dnl end_prerequisites
[

:;}]])[]dnl
EOF

}; readonly -f autogen_gitbundles; fi
