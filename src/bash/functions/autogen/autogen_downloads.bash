#
# For the copyright information for this file, please search up the
# directory tree for the first COPYING file.
#

if [[ "$(type -t \
autogen_downloads)" != function ]]; then
autogen_downloads() {

  local dir
  local ff
  local tt
  local x1
  local x2
  local x3
  local x4

  case ${autogen_downloads_has_been_called+x} in
    ?*)
      barf 'autogen_downloads has already been called'
    ;;
  esac
  autogen_downloads_has_been_called=x
  readonly autogen_downloads_has_been_called

  case $# in
    1)
    ;;
    *)
      barf 'invalid argument count: %d' $#
    ;;
  esac

  dir=$1
  readonly dir

  cat >m4/DEFINE_ALL_WGET_URLS.gitignorable.m4 <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

AC_DEFUN([DEFINE_ALL_WGET_URLS], [[{

#
# The block that contains this comment is the expansion of the
# DEFINE_ALL_WGET_URLS macro.
#

]m4_ifdef(
  [DEFINE_ALL_WGET_URLS_HAS_BEEN_CALLED],
  [gatbps_fatal([
    DEFINE_ALL_WGET_URLS has already been called
  ])],
  [m4_define([DEFINE_ALL_WGET_URLS_HAS_BEEN_CALLED])])[

]m4_if(
  m4_eval([\$# != 0]),
  [1],
  [gatbps_fatal([
    DEFINE_ALL_WGET_URLS requires exactly 0 arguments
    (\$# ]m4_if([\$#], [1], [[was]], [[were]])[ given)
  ])])[

]dnl begin_prerequisites
[

EOF

  for x1 in $dir/**/*.ag.json; do

    x2=$(echo $x1 | sed 's/\.ag\.json$//')
    x3=$(basename $x2)
    x4=$(echo $x3 | sed 's/[^0-9A-Z_a-z]/_/g')

    tt=$(jq .type $x1)

    case $tt in

      null)

        cat >m4/DEFINE_${x4}_urls.gitignorable.m4 <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

AC_DEFUN([DEFINE_${x4}_urls], [[{

#
# The block that contains this comment is the expansion of the
# DEFINE_${x4}_urls macro.
#

]m4_ifdef(
  [DEFINE_${x4}_urls_HAS_BEEN_CALLED],
  [gatbps_fatal([
    DEFINE_${x4}_urls has already been called
  ])],
  [m4_define([DEFINE_${x4}_urls_HAS_BEEN_CALLED])])[

]m4_if(
  m4_eval([\$# != 0]),
  [1],
  [gatbps_fatal([
    DEFINE_${x4}_urls requires exactly 0 arguments
    (\$# ]m4_if([\$#], [1], [[was]], [[were]])[ given)
  ])])[

]m4_define(
  [${x4}_urls_default],
  [[ ]dnl
[$dir/local/$x3 ]dnl
EOF

        jq -r '
          .urls[]
          | gsub("\\$"; "$][$][")
          | "['\'\\\\\'\''" + . + "'\'\\\\\'\'' ]dnl"
        ' $x1 >>m4/DEFINE_${x4}_urls.gitignorable.m4

        cat >>m4/DEFINE_${x4}_urls.gitignorable.m4 <<EOF
])[

case $][{${x4}_urls+x} in
  "")
    ${x4}_urls=']${x4}_urls_default['
  ;;
esac
readonly ${x4}_urls

]AC_ARG_VAR(
  [${x4}_urls],
  [
    the URLs from which to download the
    $x3
    file (default:
    ${x4}_urls=']${x4}_urls_default[')
  ])[

:;}]])[]dnl
EOF

        cat >>m4/DEFINE_ALL_WGET_URLS.gitignorable.m4 <<EOF
]AC_REQUIRE([DEFINE_${x4}_urls])[
EOF

        cat >$x2.gitignorable.ac <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

[

]dnl begin_targets
[

]GATBPS_WGET(
  [$x2],
  [
    [\$(${x4}_urls)],
  ],
  [
EOF

        jq -r '
          .hashes | to_entries[] | "    [" + .key + ":" + .value + "],"
        ' $x1 >>$x2.gitignorable.ac

        cat >>$x2.gitignorable.ac <<EOF
  ],
  [clean])[

]dnl end_targets
[

]
EOF

        cat >$x2.gitignorable.am <<EOF
##
## For the copyright information for this file, please search up the
## directory tree for the first COPYING file.
##

##
## This file was generated by ./autogen.
##

## begin_rules

$x2: m4/DEFINE_${x4}_urls.gitignorable.m4
$x2: $x2.gitignorable.ac
$x2: $x2.gitignorable.am

## end_rules
EOF

      ;;

      \"copy\")

        ff=$(jq -r .file $x1)

        cat >$x2.gitignorable.ac <<EOF
dnl
dnl For the copyright information for this file, please search up the
dnl directory tree for the first COPYING file.
dnl

dnl
dnl This file was generated by ./autogen.
dnl

[

]GATBPS_CP(
  [$x2],
  [$ff],
  [file],
  [clean])[

]
EOF

      ;;

      *)

        barf 'unknown type: %s' "$tt"

      ;;

    esac

  done

  for x1 in $dir/**/*.ac; do
    autogen_ac_include $x1
  done

  for x1 in $dir/**/*.am; do
    autogen_am_include $x1
  done

  cat >>m4/DEFINE_ALL_WGET_URLS.gitignorable.m4 <<EOF

]dnl end_prerequisites
[

:;}]])[]dnl
EOF

}; readonly -f autogen_downloads; fi
