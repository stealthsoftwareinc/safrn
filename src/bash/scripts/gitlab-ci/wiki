#! /bin/bash -
#
# For the copyright information for this file, please search up the
# directory tree for the first COPYING file.
#

set -e; . src/bash/preludes/gitlab-ci.bash

ubuntu_install_packages \
  dia \
  git \
  make \
;

cd doc/wiki

if [[ -f GNUmakefile || -f makefile || -f Makefile ]]; then
  make
fi

#
# We only want to push to the .wiki repository when we're in a CI job on
# branch master, but we always want to run make to verify that the build
# is working. This is why the following check is done here, after we run
# make, instead of in .gitlab-ci.yml or earlier in this script.
#

if [[ "${CI_COMMIT_BRANCH-}" != master ]]; then
  exit 0
fi

wiki_url=git@$CI_SERVER_HOST:$CI_PROJECT_PATH.wiki.git
readonly wiki_url

author_name=$CI_PROJECT_PATH
readonly author_name

author_email=
readonly author_email

commit_message="Update the .wiki repository

This commit was made by the following job:
$CI_JOB_URL

The above job ran on the following commit:
$CI_COMMIT_SHA"
readonly commit_message

if [[ -f trap_commit ]]; then
  trap_commit=$(cat trap_commit)
else
  trap_commit=
fi
readonly trap_commit

cd "$tmpdir"
git clone "$wiki_url" wiki
cd wiki
git config user.name "$author_name"
git config user.email "$author_email"

max_tries=10
readonly max_tries

for ((i = 0; i != max_tries; ++i)); do

  if [[ "$trap_commit" != "" ]]; then

    all_authors=("$author_name <$author_email>")
    all_authors_script=$(
      git log --pretty='%aN <%aE>' "$trap_commit".. | sort | uniq | \
        sed "s/'/'\\\\''/g; s/^/all_authors+=('/; s/\$/')/" \
      ;
    )
    eval "$all_authors_script"
    bad_authors=
    for author in "${all_authors[@]}"; do
      if [[ "$author" != "$author_name <$author_email>" ]]; then
        bad_authors=$bad_authors$'\n'
        bad_authors="$bad_authors  $author"
      fi
    done
    if [[ "$bad_authors" != "" ]]; then
      barf 'The following users mistakenly made commits directly to the .wiki repository since trap_commit = %s:%s\n' "$trap_commit" "$bad_authors"
    fi

    wiki_source_commit=$(git cat-file -p HEAD | tail -n 1)
    cd "$rundir"
    if git merge-base --is-ancestor "$CI_COMMIT_SHA" "$wiki_source_commit"; then
      printf 'This job'\''s commit (%s) is an ancestor of the .wiki repository'\''s source commit (%s). Nothing to do.\n' "$CI_COMMIT_SHA" "$wiki_source_commit"
      exit 0
    fi
    cd "$tmpdir"/wiki

  fi

  git rm "*"
  cp -R "$rundir"/doc/wiki/* .
  git add .
  git commit --allow-empty -m "$commit_message"
  git push origin master:master && break

  git fetch origin master
  git reset --hard origin/master
  git clean -d -f -f -x

done

if ((i == max_tries)); then
  barf 'Too much contention to push to the .wiki repository.'
fi
