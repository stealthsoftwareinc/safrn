#
# For the copyright information for this file, please search up the
# directory tree for the first COPYING file.
#

all:

#
# Read a variable from a file if it exists, or from the user if not.
#
# $(1): The variable name, which is also used as the file name.
#
# $(2): Set this to a nonempty string to hide the user's input.
#

define read_variable =
$(1) := $$(shell /bin/bash -c 'cat $(1) || { read -$(if $(2),s,)p "Enter $(1): " x && printf %s "$$$$x" $(if $(2),&& echo >&2,); }')
endef

#
# Define a rule to download a file from a GitLab server.
#
# $(1): The server to download from. For example: https://gitlab.com
#
# $(2): The project ID to download from. For example, the project ID of
#       https://gitlab.com/quinngrier/gatbps is: 382511
#
# $(3): The file to download. For example, to download README.md from
#       the project specified by $(1) and $(2), set this to: README.md
#
#       You can download the file to another location by specifying the
#       location as a second word. For example, to download README.md as
#       foo/bar.md, set this to: README.md foo/bar.md
#
#       Each & character in the second word will be replaced with the
#       first word. For example, to download README.md into the foo
#       directory, you can set this to: README.md foo/&
#
# $(4): The GitLab token to use when downloading. Here is an example of
#       what a token looks like: yF5V5Ysc78J55ynX7Bgb
#
#       You can set this to the empty string if no token is needed. For
#       example, no token is needed if the project is public.
#

define download_from_gitlab =

$(if $(word 2,$(3)),$(subst &,$(word 1,$(3)),$(word 2,$(3))),$(3)): FORCE
	$$(V_AT)mkdir -p $$(@D)
	@{ \
	  case '$$(V)' in \
	    0 | '') echo '  GITLAB  ' $$@ ;; \
	    2) echo 'curl -fsSo $$@ -X GET $(if $(4),-H '\''Private-Token: $(4)'\'',) '\''$(1)/api/v4/projects/$(2)/repository/files/$$(subst /,%2F,$(word 1,$(3)))/raw?ref=master'\' ;; \
	    *) echo 'curl -fsSo $$@ -X GET $(if $(4),-H '\''Private-Token: XXXXXXXXXXXXXXXXXXXX'\'',) '\''$(1)/api/v4/projects/$(2)/repository/files/$$(subst /,%2F,$(word 1,$(3)))/raw?ref=master'\' ;; \
	  esac; \
	  curl -fsSo $$@.tmp -X GET $(if $(4),-H 'Private-Token: $(4)',) '$(1)/api/v4/projects/$(2)/repository/files/$$(subst /,%2F,$(word 1,$(3)))/raw?ref=master' || exit; \
	  if test -f $$@; then \
	    cmp -s $$@ $$@.tmp; \
	    case $$$$? in \
	      0) ;; \
	      1) cat $$@.tmp >$$@ || exit ;; \
	      *) exit ;; \
	    esac; \
	    rm $$@.tmp || exit; \
	  else \
	    mv $$@.tmp $$@ || exit; \
	  fi; \
	}

all: $(if $(word 2,$(3)),$(subst &,$(word 1,$(3)),$(word 2,$(3))),$(3))

endef

## begin_variables

V_AT = $(V_AT_$(V))

V_AT_ = $(V_AT_0)

V_AT_0 = @

V_GATBPS = $(V_GATBPS_$(V))

V_GATBPS_ = $(V_GATBPS_0)

V_GATBPS_0 = @echo '  GATBPS  ' $@;

gatbps_files =

gitlab_projects =

## end_variables

include dev-aux/special-files/*.gmk

## begin_rules

$(foreach x,$(gitlab_projects),$(foreach y,$($(x)_downloads),$(eval $(call download_from_gitlab,$($(x)_server_url),$($(x)_project_id),$(subst :, ,$(y)),$($(x)_api_token)))))

$(gatbps_files): FORCE
	$(V_AT)mkdir -p $(@D)
	$(V_GATBPS)gatbps $@

.PHONY: FORCE
.PHONY: all

.SUFFIXES:

FORCE:

all: $(gatbps_files)
all: FORCE

## end_rules
