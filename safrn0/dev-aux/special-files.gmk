#
# For the copyright information for this file, please search up the
# directory tree for the first COPYING file.
#

SHELL = bash

.SUFFIXES:

.PHONY: all
all:

#
# The FORCE target can be added as a prerequisite of another target to
# force that target to always be considered out of date.
#

.PHONY: FORCE
FORCE:

#
# $(newline)
#
# A newline character.
#

define newline


endef

#
# $(eval $(call read_var,<variable>,<cache_variable>[,<show_input>]))
#
# Reads and caches <variable> using the gpgsec utility if possible, or
# directly from the user if not.
#
# <variable>
#       The variable name.
#
# <cache_variable>
#       The cache variable name. Multiple variables that need the same
#       value can use the same cache variable to avoid redundant reads.
#
# <show_input>
#       Optional. Set this to any nonempty string to show the user's
#       typed input (during direct input when gpgsec doesn't work)
#       instead of hiding it.
#
# See <https://gitlab.com/quinngrier/dotfiles/-/blob/master/bin/gpgsec>
# for more information on the gpgsec utility.
#

define read_var
ifndef $(2)
$(2) := $$(shell /bin/bash -c 'gpgsec $(2) || { printf "Enter $(2): " >&2 && read $(if $(3),,-s) x && printf '%s' "$$$$x" && $(if $(3),:,echo >&2); }')
ifdef .SHELLSTATUS
ifneq ($(.SHELLSTATUS),0)
$$(error read_var: error reading $(2))
endif
endif
endif
$(1) = $$($(2))
endef

#
# DEPRECATED: Use read_var instead.
#
# Read a variable from a file if it exists, or from the user if not.
#
# $(1): The variable name, which is also used as the file name.
#
# $(2): Set this to a nonempty string to hide the user's input.
#

define read_variable =
$(1) := $$(shell /bin/bash -c 'cat $(1) || { read -$(if $(2),s,)p "Enter $(1): " x && printf %s "$$$$x" $(if $(2),&& echo >&2,); }')
endef

#
# $(eval $(call download_gitlab_file,<target>,<server>,
#                                    <project>,<file>[,<token>]))
#
# Define a rule to download a file from a GitLab server.
#
# <target>
#       The makefile target to which to add this makefile target as a
#       prerequisite.
#
# <server>
#       The HTTP(S) URL of the GitLab server to download from. For
#       example, you might specify "https://gitlab.com".
#
# <project>
#       The project ID to download from. For example, the project ID of
#       https://gitlab.com/quinngrier/gatbps is 382511.
#
# <file>
#       The file to download. For example, if you specify "foo/bar.c",
#       then foo/bar.c will be downloaded as foo/bar.c.
#
#       You can download the file to another location by specifying a
#       second word. For example, if you specify "foo/bar.c baz/qux.c",
#       then foo/bar.c will be downloaded as baz/qux.c.
#
#       If the second word ends with "/", it will be treated as a
#       directory into which to download the file. For example, if you
#       specify "foo/bar.c baz/", then foo/bar.c will be downloaded as
#       baz/bar.c.
#
#       If the second word ends with "/&", it will be treated as a
#       directory into which to download the the file, maintaining the
#       full path. For example, if you specify "foo/bar.c baz/&", then
#       foo/bar.c will be downloaded as baz/foo/bar.c.
#
#       If the second word begins with "/", the "/" will be removed.
#       This allows a leading "/" to be used to refer to the root
#       directory of the repository.
#
#       An initial word ending in a ":" character may also be given to
#       specify the branch or tag from which to download the file. The
#       ending ":" character is removed to obtain the branch or tag
#       name. If this word is not given, it defaults to "master:".
#
# <token>
#       The token to use to access the GitLab server's API. Here is an
#       example of what a token looks like: yF5V5Ysc78J55ynX7Bgb. You
#       can manage your tokens under Settings > Access Tokens in the
#       GitLab UI. The token should have read_api scope.
#
#       You can leave this parameter out or set it to the empty string
#       if no token is needed, i.e., if the GitLab project is publicly
#       accessible.
#

dgf_tree = $(if $(filter %:,$(word 1,$(1))),$(patsubst %:,%,$(word 1,$(1))),master)

dgf_src = $(if $(filter %:,$(word 1,$(1))),$(word 2,$(1)),$(word 1,$(1)))

dgf_dst_1 = $(patsubst %/,%/$(notdir $(1)),$(2))
dgf_dst_2 = $(patsubst %/&,%/$(1),$(call dgf_dst_1,$(1),$(2)))
dgf_dst_3 = $(patsubst /%,%,$(call dgf_dst_2,$(1),$(2)))
dgf_dst_4 = $(if $(2),$(call dgf_dst_3,$(1),$(2)),$(1))
dgf_dst_5 = $(if $(filter %:,$(1)),$(call dgf_dst_4,$(2),$(3)),$(call dgf_dst_4,$(1),$(2)))
dgf_dst = $(call dgf_dst_5,$(word 1,$(1)),$(word 2,$(1)),$(word 3,$(1)))

define download_gitlab_file

$(call dgf_dst,$(4)): FORCE
	@{ \
	  case '$$(V)' in \
	    '' | 0) printf '  GITLAB   %s\n' '$$@' ;; \
	  esac; \
	}
	$$(V_AT)rm -f -r './$$@.tmp'
	$$(V_AT)mkdir -p './$$@.tmp'
	@{ \
	  set -e -u -o pipefail; \
	  V_P=:; V_P_1=:; V_P_2=:; \
	  case '$$(V)' in \
	    '' | 0) ;; \
	    2) V_P=; V_P_2=; ;; \
	    *) V_P=; V_P_1=; ;; \
	  esac; \
	  tmpdir=$$$${TMPDIR:-/tmp}; \
	  [[ "$$$$tmpdir" == /* ]] || tmpdir=./$$$$tmpdir; \
	  f1='$(2)'; \
	  f1=wrymkzui.$$$${f1//[!a-zA-Z0-9-]/-}.$(3).ssh_url_to_repo; \
	  if [[ -f "$$$$tmpdir/$$$$f1" ]]; then \
	    $$$$V_P printf 'cat %s\n' \'"$$$$tmpdir/$$$$f1"\'; \
	    ssh_url_to_repo=$$$$(cat "$$$$tmpdir/$$$$f1"); \
	  else \
	    $$$$V_P_1 printf 'curl -f -s -S -X GET %s %s | jq -r .ssh_url_to_repo\n' \
	      '$(if $(5),-H '\''Private-Token: XXXXXXXXXXXXXXXXXXXX'\'',)' \
	      \''$(2)/api/v4/projects/$(3)'\' \
	    ; \
	    $$$$V_P_2 printf 'curl -f -s -S -X GET %s %s | jq -r .ssh_url_to_repo\n' \
	      '$(if $(5),-H '\''Private-Token: $(5)'\'',)' \
	      \''$(2)/api/v4/projects/$(3)'\' \
	    ; \
	    ssh_url_to_repo=$$$$( \
	      curl -f -s -S -X GET \
	        $(if $(5),-H 'Private-Token: $(5)',) \
	        '$(2)/api/v4/projects/$(3)' \
	      | jq -r .ssh_url_to_repo \
	    ); \
	    $$$$V_P printf 'mktemp -p %s\n' \'"$$$$tmpdir"\'; \
	    f2=$$$$(mktemp -p "$$$$tmpdir"); \
	    $$$$V_P printf 'printf '\''%%s\\n'\'' %s >%s\n' \
	      \'"$$$$ssh_url_to_repo"\' \
	      \'"$$$$f2"\' \
	    ; \
	    printf '%s\n' "$$$$ssh_url_to_repo" >"$$$$f2"; \
	    $$$$V_P printf 'mv -f %s %s\n' \
	      \'"$$$$f2"\' \
	      \'"$$$$tmpdir/$$$$f1"\' \
	    ; \
	    mv -f "$$$$f2" "$$$$tmpdir/$$$$f1"; \
	  fi; \
	  tree='$(call dgf_tree,$(4))'; \
	  src='$(call dgf_src,$(4))'; \
	  while :; do \
	    if [[ "$$$$src" == */* ]]; then \
	      src_x=$$$${src%/*}; \
	      src_y=$$$${src##*/}; \
	    else \
	      src_x=; \
	      src_y=$$$$src; \
	    fi; \
	    $$$$V_P printf 'git archive %s %s %s | (cd %s && tar x)\n' \
	      \'"--remote=$$$$ssh_url_to_repo"\' \
	      \'"$$$$tree:$$$$src_x"\' \
	      \'"$$$$src_y"\' \
	      \''./$$@.tmp'\' \
	    ; \
	    git archive \
	      "--remote=$$$$ssh_url_to_repo" \
	      "$$$$tree:$$$$src_x" \
	      "$$$$src_y" \
	    | (cd './$$@.tmp' && tar x); \
	    if [[ -h './$$@.tmp'/"$$$$src_y" ]]; then \
	      $$$$V_P printf 'readlink %s\n' \
	        \''./$$@.tmp'/"$$$$src_y"\' \
	      ; \
	      if [[ "$$$$src" == */* ]]; then \
	        x=$$$$src_x; \
	        y=$$$$(readlink './$$@.tmp'/"$$$$src_y"); \
	        while [[ "$$$$y" == ../* ]]; do \
	          x=$$$${x%/*}; \
	          y=$$$${y#../}; \
	        done; \
	        src=$$$$x/$$$$y; \
	      else \
	        src=$$$$(readlink './$$@.tmp'/"$$$$src_y"); \
	      fi; \
	      $$$$V_P printf 'rm %s\n' \''./$$@.tmp'/"$$$$src_y"\'; \
	      rm './$$@.tmp'/"$$$$src_y"; \
	    else \
	      if [[ -f './$$@' ]]; then \
	        $$$$V_P printf 'cmp %s %s >/dev/null\n' \
	          \''./$$@.tmp'/"$$$$src_y"\' \
	          \''./$$@'\' \
	        ; \
	        s=0; \
	        cmp './$$@.tmp'/"$$$$src_y" './$$@' >/dev/null || s=$$$$?; \
	        if ((s == 0)); then \
	          $$$$V_P printf 'rm %s\n' \''./$$@.tmp'/"$$$$src_y"\'; \
	          rm './$$@.tmp'/"$$$$src_y"; \
	          $$$$V_P printf 'rmdir %s\n' \''./$$@.tmp'\'; \
	          rmdir './$$@.tmp'; \
	          break; \
	        elif ((s != 1)); then \
	          exit $$$$s; \
	        fi; \
	      fi; \
	      $$$$V_P printf 'touch %s\n' \''./$$@.tmp'/"$$$$src_y"\'; \
	      touch './$$@.tmp'/"$$$$src_y"; \
	      $$$$V_P printf 'mv -f %s %s\n' \
	        \''./$$@.tmp'/"$$$$src_y"\' \
	        \''./$$@'\' \
	      ; \
	      mv -f './$$@.tmp'/"$$$$src_y" './$$@'; \
	      $$$$V_P printf 'rmdir %s\n' \''./$$@.tmp'\'; \
	      rmdir './$$@.tmp'; \
	      break; \
	    fi; \
	  done; \
	}

$(1): $(call dgf_dst,$(4))

endef

#
# $(1):
#       A variable name/prefix for the project.
#

define download_gitlab_project

.PHONY: $(1)

$(foreach x,$(subst $(newline), ,$($(1)_downloads)),$(call download_gitlab_file,$(1),$($(1)_server_url),$($(1)_project_id),$(subst :,: ,$(subst @, ,$(x))),$($(1)_api_token)))

all: $(1)

endef

#-----------------------------------------------------------------------

## begin_variables

V_AT = $(V_AT_$(V))

V_AT_ = $(V_AT_0)

V_AT_0 = @

V_GATBPS = $(V_GATBPS_$(V))

V_GATBPS_ = $(V_GATBPS_0)

V_GATBPS_0 = @echo '  GATBPS  ' $@;

gitlab_projects =

## end_variables

include dev-aux/special-files/*.gmk

#-----------------------------------------------------------------------

GATBPS = gatbps

gatbps_files_one_line = $(subst $(newline), ,$(gatbps_files))

.PHONY: gatbps_files_noempty
$(gatbps_files_one_line) gatbps_files_noempty: FORCE
	$(V_AT)mkdir -p $(@D)
	$(V_GATBPS)$(GATBPS) $@

.PHONY: gatbps
gatbps: $(gatbps_files_one_line)

all: $(gatbps_files_one_line)

#-----------------------------------------------------------------------

$(foreach x,$(gitlab_projects),$(eval $(call download_gitlab_project,$(x))))
